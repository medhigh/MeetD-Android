package org.tempuri;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.1
 * 2015-10-12T16:52:33.378+03:00
 * Generated source version: 3.0.1
 * 
 */
@WebServiceClient(name = "XmlService", 
                  wsdlLocation = "/home/medhigh/IdeaProjects/MeetD-Android/wsdl/XmlService.wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class XmlService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "XmlService");
    public final static QName ServiceProviderBinding = new QName("http://tempuri.org/", "ServiceProviderBinding");
    public final static QName PatientBinding = new QName("http://tempuri.org/", "PatientBinding");
    static {
        URL url = XmlService.class.getResource("/home/medhigh/IdeaProjects/MeetD-Android/wsdl/XmlService.wsdl");
        if (url == null) {
            url = XmlService.class.getClassLoader().getResource("/home/medhigh/IdeaProjects/MeetD-Android/wsdl/XmlService.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(XmlService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "/home/medhigh/IdeaProjects/MeetD-Android/wsdl/XmlService.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public XmlService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public XmlService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public XmlService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public XmlService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public XmlService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public XmlService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns IServiceProvider
     */
    @WebEndpoint(name = "ServiceProviderBinding")
    public IServiceProvider getServiceProviderBinding() {
        return super.getPort(ServiceProviderBinding, IServiceProvider.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IServiceProvider
     */
    @WebEndpoint(name = "ServiceProviderBinding")
    public IServiceProvider getServiceProviderBinding(WebServiceFeature... features) {
        return super.getPort(ServiceProviderBinding, IServiceProvider.class, features);
    }
    /**
     *
     * @return
     *     returns IPatient
     */
    @WebEndpoint(name = "PatientBinding")
    public IPatient getPatientBinding() {
        return super.getPort(PatientBinding, IPatient.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IPatient
     */
    @WebEndpoint(name = "PatientBinding")
    public IPatient getPatientBinding(WebServiceFeature... features) {
        return super.getPort(PatientBinding, IPatient.class, features);
    }

}
