package soap.wcf;




//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.1.8.0
//
// Created by Quasar Development at 15-10-2015
//
//---------------------------------------------------




import org.ksoap2.HeaderProperty;
import org.ksoap2.serialization.*;
import org.ksoap2.transport.*;

import java.util.List;


public class ServiceProviderBinding
{
    interface RCBIWcfMethod
    {
        ExtendedSoapSerializationEnvelope CreateSoapEnvelope() throws Exception;

        Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope, Object result) throws Exception;
    }

    String url="http://meetmdwcf.azurewebsites.net/API/XmlService.svc/ServiceProvider";

    int timeOut=60000;
    public List< HeaderProperty> httpHeaders;
    public boolean enableLogging;

    IServiceEvents callback;
    public ServiceProviderBinding(){}

    public ServiceProviderBinding(IServiceEvents callback)
    {
        this.callback = callback;
    }
    public ServiceProviderBinding(IServiceEvents callback, String url)
    {
        this.callback = callback;
        this.url = url;
    }

    public ServiceProviderBinding(IServiceEvents callback, String url, int timeOut)
    {
        this.callback = callback;
        this.url = url;
        this.timeOut=timeOut;
    }

    protected org.ksoap2.transport.Transport createTransport()
    {
        try
        {
            java.net.URI uri = new java.net.URI(url);
            if(uri.getScheme().equalsIgnoreCase("https"))
            {
                int port=uri.getPort()>0?uri.getPort():443;
                return new HttpsTransportSE(uri.getHost(), port, uri.getPath(), timeOut);
            }
            else
            {
                return new HttpTransportSE(url,timeOut);
            }

        }
        catch (java.net.URISyntaxException e)
        {
        }
        return null;
    }
    
    protected ExtendedSoapSerializationEnvelope createEnvelope()
    {
        ExtendedSoapSerializationEnvelope envelope= new ExtendedSoapSerializationEnvelope(ExtendedSoapSerializationEnvelope.VER11);
        return envelope;
    }
    
    protected List sendRequest(String methodName,ExtendedSoapSerializationEnvelope envelope,org.ksoap2.transport.Transport transport  )throws Exception
    {
        return transport.call(methodName, envelope, httpHeaders);
    }

    Object getResult(Class destObj,Object source,String resultName,ExtendedSoapSerializationEnvelope __envelope) throws Exception
    {
        if(source==null)
        {
            return null;
        }
        if(source instanceof SoapPrimitive)
        {
            SoapPrimitive soap =(SoapPrimitive)source;
            if(soap.getName().equals(resultName))
            {
                Object instance=__envelope.get(source,destObj);
                return instance;
            }
        }
        else
        {
            SoapObject soap = (SoapObject)source;
            if (soap.hasProperty(resultName))
            {
                Object j=soap.getProperty(resultName);
                if(j==null)
                {
                    return null;
                }
                Object instance=__envelope.get(j,destObj);
                return instance;
            }
            else if( soap.getName().equals(resultName)) {
                Object instance=__envelope.get(source,destObj);
                return instance;
            }
       }

       return null;
    }

        
    public AuthtokenXml ProviderLogin(final String providerId,final String password ) throws Exception
    {
        return (AuthtokenXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderLogin");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="providerId";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(providerId!=null?providerId:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="password";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(password!=null?password:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (AuthtokenXml)getResult(AuthtokenXml.class,__result,"ProviderLoginResult",__envelope);
            }
        },"http://tempuri.org/IServiceProvider/ProviderLogin");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<AuthtokenXml>> ProviderLoginAsync(final String providerId,final String password)
    {
        return executeAsync(new Functions.IFunc<AuthtokenXml>() {
            public AuthtokenXml Func() throws Exception {
                return ProviderLogin( providerId,password);
            }
        });
    }
    
    public Boolean ProviderResetPassword(final String providerId ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderResetPassword");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="providerId";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(providerId!=null?providerId:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderResetPasswordResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderResetPassword");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderResetPasswordAsync(final String providerId)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderResetPassword( providerId);
            }
        });
    }
    
    public Boolean ProviderLogout(final AuthtokenXml authToken ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderLogout");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderLogoutResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderLogout");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderLogoutAsync(final AuthtokenXml authToken)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderLogout( authToken);
            }
        });
    }
    
    public Boolean ProviderChangePassword(final AuthtokenXml authToken,final String password ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderChangePassword");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="password";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(password!=null?password:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderChangePasswordResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderChangePassword");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderChangePasswordAsync(final AuthtokenXml authToken,final String password)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderChangePassword( authToken,password);
            }
        });
    }
    
    public Boolean ProviderChangeSpeciality(final AuthtokenXml authToken,final String speciality ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderChangeSpeciality");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="speciality";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(speciality!=null?speciality:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderChangeSpecialityResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderChangeSpeciality");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderChangeSpecialityAsync(final AuthtokenXml authToken,final String speciality)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderChangeSpeciality( authToken,speciality);
            }
        });
    }
    
    public Boolean ProviderChangeInfo(final AuthtokenXml authToken,final String info ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderChangeInfo");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="info";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(info!=null?info:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderChangeInfoResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderChangeInfo");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderChangeInfoAsync(final AuthtokenXml authToken,final String info)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderChangeInfo( authToken,info);
            }
        });
    }
    
    public Boolean ProviderSetAppointmentsPerPatient(final AuthtokenXml authToken,final Integer appointmentsCount ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderSetAppointmentsPerPatient");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="appointmentsCount";
                __info.type=PropertyInfo.INTEGER_CLASS;
                __info.setValue(appointmentsCount!=null?appointmentsCount:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderSetAppointmentsPerPatientResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderSetAppointmentsPerPatient");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderSetAppointmentsPerPatientAsync(final AuthtokenXml authToken,final Integer appointmentsCount)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderSetAppointmentsPerPatient( authToken,appointmentsCount);
            }
        });
    }
    
    public Boolean ProviderChangeContacts(final AuthtokenXml authToken,final String contacts ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderChangeContacts");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="contacts";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(contacts!=null?contacts:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderChangeContactsResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderChangeContacts");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderChangeContactsAsync(final AuthtokenXml authToken,final String contacts)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderChangeContacts( authToken,contacts);
            }
        });
    }
    
    public Boolean ProviderAddLocation(final AuthtokenXml authToken,final LocationXml location ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                __envelope.addMapping("http://tempuri.org/","location",new LocationXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderAddLocation");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="location";
                __info.type=LocationXml.class;
                __info.setValue(location!=null?location:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderAddLocationResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderAddLocation");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderAddLocationAsync(final AuthtokenXml authToken,final LocationXml location)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderAddLocation( authToken,location);
            }
        });
    }
    
    public Boolean ProviderRemoveLocation(final AuthtokenXml authToken,final String location ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderRemoveLocation");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="location";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(location!=null?location:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderRemoveLocationResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderRemoveLocation");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderRemoveLocationAsync(final AuthtokenXml authToken,final String location)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderRemoveLocation( authToken,location);
            }
        });
    }
    
    public Boolean ProviderAddTimeslotPattern(final AuthtokenXml authToken,final TimeslotPatternXml pattern ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                __envelope.addMapping("http://tempuri.org/","pattern",new TimeslotPatternXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "ProviderAddTimeslotPattern");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="pattern";
                __info.type=TimeslotPatternXml.class;
                __info.setValue(pattern!=null?pattern:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ProviderAddTimeslotPatternResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IServiceProvider/ProviderAddTimeslotPattern");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> ProviderAddTimeslotPatternAsync(final AuthtokenXml authToken,final TimeslotPatternXml pattern)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return ProviderAddTimeslotPattern( authToken,pattern);
            }
        });
    }
    
    public String ProviderRemoveTimeslotPattern(final String authToken,final String patternId ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderRemoveTimeslotPatternAsync(final String authToken,final String patternId)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderRemoveTimeslotPattern( authToken,patternId);
            }
        });
    }
    
    public String ProviderGenerateAgenda(final String authToken,final String period,final String pattern ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderGenerateAgendaAsync(final String authToken,final String period,final String pattern)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderGenerateAgenda( authToken,period,pattern);
            }
        });
    }
    
    public String ProviderCreateTimeslot(final String authToken,final String timeslot ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderCreateTimeslotAsync(final String authToken,final String timeslot)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderCreateTimeslot( authToken,timeslot);
            }
        });
    }
    
    public String ProviderGetAgenda(final String authToken,final String strartDate,final String endDate ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderGetAgendaAsync(final String authToken,final String strartDate,final String endDate)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderGetAgenda( authToken,strartDate,endDate);
            }
        });
    }
    
    public String ProviderFilterAgenda(final String authToken,final String state,final String startDate,final String endDate ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderFilterAgendaAsync(final String authToken,final String state,final String startDate,final String endDate)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderFilterAgenda( authToken,state,startDate,endDate);
            }
        });
    }
    
    public String ProviderBlockTimeslots(final String authToken,final String timeslotsIds ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderBlockTimeslotsAsync(final String authToken,final String timeslotsIds)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderBlockTimeslots( authToken,timeslotsIds);
            }
        });
    }
    
    public String ProviderUnblockTimeslots(final String authToken,final String timeslotsIds ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderUnblockTimeslotsAsync(final String authToken,final String timeslotsIds)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderUnblockTimeslots( authToken,timeslotsIds);
            }
        });
    }
    
    public String ProviderCancelAppointments(final String authToken,final String timeslotsIds,final String cancelReason ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderCancelAppointmentsAsync(final String authToken,final String timeslotsIds,final String cancelReason)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderCancelAppointments( authToken,timeslotsIds,cancelReason);
            }
        });
    }
    
    public String ProviderChangeAppointment(final String authToken,final String appointmentId,final String newTimeslot ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderChangeAppointmentAsync(final String authToken,final String appointmentId,final String newTimeslot)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderChangeAppointment( authToken,appointmentId,newTimeslot);
            }
        });
    }
    
    public String ProviderCreateAppointment(final String authToken,final String timeslotId,final String insuranceNumber ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderCreateAppointmentAsync(final String authToken,final String timeslotId,final String insuranceNumber)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderCreateAppointment( authToken,timeslotId,insuranceNumber);
            }
        });
    }
    
    public String ProviderCreateAppointmentResults(final String authToken,final String appointmentId,final String results ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> ProviderCreateAppointmentResultsAsync(final String authToken,final String appointmentId,final String results)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return ProviderCreateAppointmentResults( authToken,appointmentId,results);
            }
        });
    }

    
    protected Object execute(RCBIWcfMethod wcfMethod,String methodName) throws Exception
    {
        org.ksoap2.transport.Transport __httpTransport=createTransport();
        __httpTransport.debug=enableLogging;
        ExtendedSoapSerializationEnvelope __envelope=wcfMethod.CreateSoapEnvelope();
        try
        {
            sendRequest(methodName, __envelope, __httpTransport);
            
        }
        finally {
            if (__httpTransport.debug) {
                if (__httpTransport.requestDump != null) {
                    android.util.Log.i("requestDump",__httpTransport.requestDump);
                }
                if (__httpTransport.responseDump != null) {
                    android.util.Log.i("responseDump",__httpTransport.responseDump);
                }
            }
        }
        Object __retObj = __envelope.bodyIn;
        if (__retObj instanceof org.ksoap2.SoapFault){
            org.ksoap2.SoapFault __fault = (org.ksoap2.SoapFault)__retObj;
            throw convertToException(__fault,__envelope);
        }else{
            return wcfMethod.ProcessResult(__envelope,__retObj);
        }
    }
    
    protected < T> android.os.AsyncTask< Void, Void, OperationResult< T>>  executeAsync(final Functions.IFunc< T> func)
    {
        return new android.os.AsyncTask< Void, Void, OperationResult< T>>()
        {
            @Override
            protected void onPreExecute() {
                callback.Starting();
            };
            @Override
            protected OperationResult< T> doInBackground(Void... params) {
                OperationResult< T> result = new OperationResult< T>();
                try
                {
                    result.Result= func.Func();
                }
                catch(Exception ex)
                {
                    ex.printStackTrace();
                    result.Exception=ex;
                }
                return result;
            }
            
            @Override
            protected void onPostExecute(OperationResult< T> result)
            {
                callback.Completed(result);
            }
        }.execute();
    }
        
    Exception convertToException(org.ksoap2.SoapFault fault,ExtendedSoapSerializationEnvelope envelope)
    {

        return new Exception(fault.faultstring);
    }
}


