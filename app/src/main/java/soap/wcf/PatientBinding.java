package soap.wcf;




//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.1.8.0
//
// Created by Quasar Development at 15-10-2015
//
//---------------------------------------------------




import org.ksoap2.HeaderProperty;
import org.ksoap2.serialization.*;
import org.ksoap2.transport.*;

import java.util.List;


public class PatientBinding
{
    interface RCBIWcfMethod
    {
        ExtendedSoapSerializationEnvelope CreateSoapEnvelope() throws Exception;

        Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope, Object result) throws Exception;
    }

    String url="http://meetmdwcf.azurewebsites.net/API/XmlService.svc/Patient";

    int timeOut=60000;
    public List< HeaderProperty> httpHeaders;
    public boolean enableLogging;

    IServiceEvents callback;
    public PatientBinding(){}

    public PatientBinding(IServiceEvents callback)
    {
        this.callback = callback;
    }
    public PatientBinding(IServiceEvents callback, String url)
    {
        this.callback = callback;
        this.url = url;
    }

    public PatientBinding(IServiceEvents callback, String url, int timeOut)
    {
        this.callback = callback;
        this.url = url;
        this.timeOut=timeOut;
    }

    protected org.ksoap2.transport.Transport createTransport()
    {
        try
        {
            java.net.URI uri = new java.net.URI(url);
            if(uri.getScheme().equalsIgnoreCase("https"))
            {
                int port=uri.getPort()>0?uri.getPort():443;
                return new HttpsTransportSE(uri.getHost(), port, uri.getPath(), timeOut);
            }
            else
            {
                return new HttpTransportSE(url,timeOut);
            }

        }
        catch (java.net.URISyntaxException e)
        {
        }
        return null;
    }
    
    protected ExtendedSoapSerializationEnvelope createEnvelope()
    {
        ExtendedSoapSerializationEnvelope envelope= new ExtendedSoapSerializationEnvelope(ExtendedSoapSerializationEnvelope.VER11);
        return envelope;
    }
    
    protected List sendRequest(String methodName,ExtendedSoapSerializationEnvelope envelope,org.ksoap2.transport.Transport transport  )throws Exception
    {
        return transport.call(methodName, envelope, httpHeaders);
    }

    Object getResult(Class destObj,Object source,String resultName,ExtendedSoapSerializationEnvelope __envelope) throws Exception
    {
        if(source==null)
        {
            return null;
        }
        if(source instanceof SoapPrimitive)
        {
            SoapPrimitive soap =(SoapPrimitive)source;
            if(soap.getName().equals(resultName))
            {
                Object instance=__envelope.get(source,destObj);
                return instance;
            }
        }
        else
        {
            SoapObject soap = (SoapObject)source;
            if (soap.hasProperty(resultName))
            {
                Object j=soap.getProperty(resultName);
                if(j==null)
                {
                    return null;
                }
                Object instance=__envelope.get(j,destObj);
                return instance;
            }
            else if( soap.getName().equals(resultName)) {
                Object instance=__envelope.get(source,destObj);
                return instance;
            }
       }

       return null;
    }

        
    public AuthtokenXml PatientLogin(final String insuranceNumber,final String password ) throws Exception
    {
        return (AuthtokenXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientLogin");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="insuranceNumber";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(insuranceNumber!=null?insuranceNumber:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="password";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(password!=null?password:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (AuthtokenXml)getResult(AuthtokenXml.class,__result,"PatientLoginResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientLogin");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<AuthtokenXml>> PatientLoginAsync(final String insuranceNumber,final String password)
    {
        return executeAsync(new Functions.IFunc<AuthtokenXml>() {
            public AuthtokenXml Func() throws Exception {
                return PatientLogin( insuranceNumber,password);
            }
        });
    }
    
    public Boolean PatientCheckRegistered(final String insuranceNumber ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientCheckRegistered");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="insuranceNumber";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(insuranceNumber!=null?insuranceNumber:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("PatientCheckRegisteredResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IPatient/PatientCheckRegistered");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> PatientCheckRegisteredAsync(final String insuranceNumber)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return PatientCheckRegistered( insuranceNumber);
            }
        });
    }
    
    public Boolean PatientLogout(final AuthtokenXml authToken ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientLogout");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("PatientLogoutResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IPatient/PatientLogout");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> PatientLogoutAsync(final AuthtokenXml authToken)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return PatientLogout( authToken);
            }
        });
    }
    
    public Boolean PatientChangePassword(final AuthtokenXml authToken,final String password ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientChangePassword");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="password";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(password!=null?password:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("PatientChangePasswordResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IPatient/PatientChangePassword");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> PatientChangePasswordAsync(final AuthtokenXml authToken,final String password)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return PatientChangePassword( authToken,password);
            }
        });
    }
    
    public Boolean PatientResetPassword(final String insuranceNumber ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientResetPassword");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="insuranceNumber";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(insuranceNumber!=null?insuranceNumber:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("PatientResetPasswordResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IPatient/PatientResetPassword");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> PatientResetPasswordAsync(final String insuranceNumber)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return PatientResetPassword( insuranceNumber);
            }
        });
    }
    
    public ArrayOfServiceProviderXml PatientSearchProviderByName(final AuthtokenXml authToken,final String providerNamePattern ) throws Exception
    {
        return (ArrayOfServiceProviderXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientSearchProviderByName");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="providerNamePattern";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(providerNamePattern!=null?providerNamePattern:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (ArrayOfServiceProviderXml)getResult(ArrayOfServiceProviderXml.class,__result,"PatientSearchProviderByNameResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientSearchProviderByName");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<ArrayOfServiceProviderXml>> PatientSearchProviderByNameAsync(final AuthtokenXml authToken,final String providerNamePattern)
    {
        return executeAsync(new Functions.IFunc<ArrayOfServiceProviderXml>() {
            public ArrayOfServiceProviderXml Func() throws Exception {
                return PatientSearchProviderByName( authToken,providerNamePattern);
            }
        });
    }
    
    public ArrayOfServiceProviderXml PatientSearchProviderByCoordinates(final AuthtokenXml authToken,final String coordinates,final Integer range ) throws Exception
    {
        return (ArrayOfServiceProviderXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientSearchProviderByCoordinates");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="coordinates";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(coordinates!=null?coordinates:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="range";
                __info.type=PropertyInfo.INTEGER_CLASS;
                __info.setValue(range!=null?range:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (ArrayOfServiceProviderXml)getResult(ArrayOfServiceProviderXml.class,__result,"PatientSearchProviderByCoordinatesResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientSearchProviderByCoordinates");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<ArrayOfServiceProviderXml>> PatientSearchProviderByCoordinatesAsync(final AuthtokenXml authToken,final String coordinates,final Integer range)
    {
        return executeAsync(new Functions.IFunc<ArrayOfServiceProviderXml>() {
            public ArrayOfServiceProviderXml Func() throws Exception {
                return PatientSearchProviderByCoordinates( authToken,coordinates,range);
            }
        });
    }
    
    public ArrayOfServiceProviderXml PatientSearchProviderByAddress(final AuthtokenXml authToken,final String address,final Integer range ) throws Exception
    {
        return (ArrayOfServiceProviderXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientSearchProviderByAddress");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="address";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(address!=null?address:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="range";
                __info.type=PropertyInfo.INTEGER_CLASS;
                __info.setValue(range!=null?range:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (ArrayOfServiceProviderXml)getResult(ArrayOfServiceProviderXml.class,__result,"PatientSearchProviderByAddressResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientSearchProviderByAddress");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<ArrayOfServiceProviderXml>> PatientSearchProviderByAddressAsync(final AuthtokenXml authToken,final String address,final Integer range)
    {
        return executeAsync(new Functions.IFunc<ArrayOfServiceProviderXml>() {
            public ArrayOfServiceProviderXml Func() throws Exception {
                return PatientSearchProviderByAddress( authToken,address,range);
            }
        });
    }
    
    public ArrayOfServiceProviderXml PatientSearchProviderBySpeciality(final AuthtokenXml authToken,final String speciality ) throws Exception
    {
        return (ArrayOfServiceProviderXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientSearchProviderBySpeciality");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="speciality";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(speciality!=null?speciality:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (ArrayOfServiceProviderXml)getResult(ArrayOfServiceProviderXml.class,__result,"PatientSearchProviderBySpecialityResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientSearchProviderBySpeciality");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<ArrayOfServiceProviderXml>> PatientSearchProviderBySpecialityAsync(final AuthtokenXml authToken,final String speciality)
    {
        return executeAsync(new Functions.IFunc<ArrayOfServiceProviderXml>() {
            public ArrayOfServiceProviderXml Func() throws Exception {
                return PatientSearchProviderBySpeciality( authToken,speciality);
            }
        });
    }
    
    public ArrayOfString PatientGetSpecialities(final AuthtokenXml authToken ) throws Exception
    {
        return (ArrayOfString)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientGetSpecialities");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (ArrayOfString)getResult(ArrayOfString.class,__result,"PatientGetSpecialitiesResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientGetSpecialities");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<ArrayOfString>> PatientGetSpecialitiesAsync(final AuthtokenXml authToken)
    {
        return executeAsync(new Functions.IFunc<ArrayOfString>() {
            public ArrayOfString Func() throws Exception {
                return PatientGetSpecialities( authToken);
            }
        });
    }
    
    public ArrayOfTimeslotXml PatientGetAgenda(final AuthtokenXml authToken,final String providerId ) throws Exception
    {
        return (ArrayOfTimeslotXml)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientGetAgenda");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="providerId";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(providerId!=null?providerId:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                return (ArrayOfTimeslotXml)getResult(ArrayOfTimeslotXml.class,__result,"PatientGetAgendaResult",__envelope);
            }
        },"http://tempuri.org/IPatient/PatientGetAgenda");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult<ArrayOfTimeslotXml>> PatientGetAgendaAsync(final AuthtokenXml authToken,final String providerId)
    {
        return executeAsync(new Functions.IFunc<ArrayOfTimeslotXml>() {
            public ArrayOfTimeslotXml Func() throws Exception {
                return PatientGetAgenda( authToken,providerId);
            }
        });
    }
    
    public Boolean PatientCreateAppointment(final AuthtokenXml authToken,final String timeslotId ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientCreateAppointment");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="timeslotId";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(timeslotId!=null?timeslotId:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("PatientCreateAppointmentResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IPatient/PatientCreateAppointment");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> PatientCreateAppointmentAsync(final AuthtokenXml authToken,final String timeslotId)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return PatientCreateAppointment( authToken,timeslotId);
            }
        });
    }
    
    public Boolean PatientJoinWaitinglistProvider(final AuthtokenXml authToken,final String providerId ) throws Exception
    {
        return (Boolean)execute(new RCBIWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "PatientJoinWaitinglistProvider");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="authToken";
                __info.type=AuthtokenXml.class;
                __info.setValue(authToken!=null?authToken:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://tempuri.org/";
                __info.name="providerId";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(providerId!=null?providerId:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("PatientJoinWaitinglistProviderResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"http://tempuri.org/IPatient/PatientJoinWaitinglistProvider");
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< Boolean>> PatientJoinWaitinglistProviderAsync(final AuthtokenXml authToken,final String providerId)
    {
        return executeAsync(new Functions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return PatientJoinWaitinglistProvider( authToken,providerId);
            }
        });
    }
    
    public String PatientJoinWaitinglistSpeciality(final String authToken,final String speciality,final String region ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientJoinWaitinglistSpecialityAsync(final String authToken,final String speciality,final String region)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientJoinWaitinglistSpeciality( authToken,speciality,region);
            }
        });
    }
    
    public String PatientGetAppointments(final String authToken,final String strartDate,final String endDate ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientGetAppointmentsAsync(final String authToken,final String strartDate,final String endDate)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientGetAppointments( authToken,strartDate,endDate);
            }
        });
    }
    
    public String PatientGetHospitalsByCoordinates(final String authToken,final String coordinates,final String range ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientGetHospitalsByCoordinatesAsync(final String authToken,final String coordinates,final String range)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientGetHospitalsByCoordinates( authToken,coordinates,range);
            }
        });
    }
    
    public String PatientGetHospitalsByAddress(final String authToken,final String address,final String range ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientGetHospitalsByAddressAsync(final String authToken,final String address,final String range)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientGetHospitalsByAddress( authToken,address,range);
            }
        });
    }
    
    public String PatientCancelAppointment(final String authToken,final String appointmentId ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientCancelAppointmentAsync(final String authToken,final String appointmentId)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientCancelAppointment( authToken,appointmentId);
            }
        });
    }
    
    public String PatientChangeAppointment(final String authToken,final String appointmentId,final String newTimeslotId ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientChangeAppointmentAsync(final String authToken,final String appointmentId,final String newTimeslotId)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientChangeAppointment( authToken,appointmentId,newTimeslotId);
            }
        });
    }
    
    public String PatientGetSurveys(final String authToken,final String surveyState ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientGetSurveysAsync(final String authToken,final String surveyState)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientGetSurveys( authToken,surveyState);
            }
        });
    }
    
    public String PatientFillinSurvey(final String authToken,final String surveyId,final String results ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientFillinSurveyAsync(final String authToken,final String surveyId,final String results)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientFillinSurvey( authToken,surveyId,results);
            }
        });
    }
    
    public String PatientCreateReminder(final String authToken,final String reminder ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientCreateReminderAsync(final String authToken,final String reminder)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientCreateReminder( authToken,reminder);
            }
        });
    }
    
    public String PatientRemoveReminder(final String authToken,final String reminderId ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientRemoveReminderAsync(final String authToken,final String reminderId)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientRemoveReminder( authToken,reminderId);
            }
        });
    }
    
    public String PatientGetReminders(final String authToken ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientGetRemindersAsync(final String authToken)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientGetReminders( authToken);
            }
        });
    }
    
    public String PatientGetInfo(final String authToken,final String offset,final String limit ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, OperationResult< String>> PatientGetInfoAsync(final String authToken,final String offset,final String limit)
    {
        return executeAsync(new Functions.IFunc< String>() {
            public String Func() throws Exception {
                return PatientGetInfo( authToken,offset,limit);
            }
        });
    }

    
    protected Object execute(RCBIWcfMethod wcfMethod,String methodName) throws Exception
    {
        org.ksoap2.transport.Transport __httpTransport=createTransport();
        __httpTransport.debug=enableLogging;
        ExtendedSoapSerializationEnvelope __envelope=wcfMethod.CreateSoapEnvelope();
        try
        {
            sendRequest(methodName, __envelope, __httpTransport);
            
        }
        finally {
            if (__httpTransport.debug) {
                if (__httpTransport.requestDump != null) {
                    android.util.Log.i("requestDump",__httpTransport.requestDump);
                }
                if (__httpTransport.responseDump != null) {
                    android.util.Log.i("responseDump",__httpTransport.responseDump);
                }
            }
        }
        Object __retObj = __envelope.bodyIn;
        if (__retObj instanceof org.ksoap2.SoapFault){
            org.ksoap2.SoapFault __fault = (org.ksoap2.SoapFault)__retObj;
            throw convertToException(__fault,__envelope);
        }else{
            return wcfMethod.ProcessResult(__envelope,__retObj);
        }
    }
    
    protected < T> android.os.AsyncTask< Void, Void, OperationResult< T>>  executeAsync(final Functions.IFunc< T> func)
    {
        return new android.os.AsyncTask< Void, Void, OperationResult< T>>()
        {
            @Override
            protected void onPreExecute() {
                callback.Starting();
            };
            @Override
            protected OperationResult< T> doInBackground(Void... params) {
                OperationResult< T> result = new OperationResult< T>();
                try
                {
                    result.Result= func.Func();
                }
                catch(Exception ex)
                {
                    ex.printStackTrace();
                    result.Exception=ex;
                }
                return result;
            }
            
            @Override
            protected void onPostExecute(OperationResult< T> result)
            {
                callback.Completed(result);
            }
        }.execute();
    }
        
    Exception convertToException(org.ksoap2.SoapFault fault,ExtendedSoapSerializationEnvelope envelope)
    {

        return new Exception(fault.faultstring);
    }
}


